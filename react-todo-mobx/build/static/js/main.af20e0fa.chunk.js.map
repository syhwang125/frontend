{"version":3,"sources":["views/TodoEditFormView.js","IDGenerator.js","containers/TodoEditFormContainer.js","views/TodoListView.js","containers/TodoListContainer.js","containers/SearchbarContainer.js","App.js","reportWebVitals.js","store/TodoStore.js","index.js"],"names":["TodoEditFormView","this","props","todo","onSetTodoProps","onAddTodo","onUpdateTodo","onRemoveTodo","Date","noValidate","Grid","container","xs","spacing","item","TextField","margin","id","label","variant","value","title","onChange","event","target","utils","DateFnsUtils","format","date","valueOf","KeyboardButtonProps","Button","color","startIcon","onClick","PureComponent","generateId","length","chars","split","Math","floor","random","str","i","TodoEditFormContainer","inject","autobind","observer","name","todoStore","setTodoProps","addTodo","updateTodo","removeTodo","Component","TodoListView","todos","onSelectedTodo","TableContainer","component","Paper","Table","m","TableHead","TableRow","TableCell","align","TableBody","Array","isArray","map","hover","moment","TodoListContainer","selectedTodo","searchText","filter","toLowerCase","indexOf","SearchbarContainer","setSearchText","InputProps","startAdornment","InputAdornment","position","onChangeSearchText","App","Container","Box","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","makeObservable","_todo","_searchText","_todos","push","foundTodo","find","index","findIndex","splice","slice","observable","action","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.af20e0fa.chunk.js","sourcesContent":["import 'date-fns';\nimport React, { PureComponent } from 'react';\nimport { TextField, Grid, Button} from '@material-ui/core';\nimport SaveIcon from '@material-ui/icons/Save';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport UpdateIcon from '@material-ui/icons/Update';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\n\nclass TodoEditFormView extends PureComponent {\n  render(){\n\n    const { todo, onSetTodoProps, onAddTodo, onUpdateTodo, onRemoveTodo } = this.props;\n\n    const selectedDate = new Date();\n\n    return(\n      <form noValidate>\n        <Grid container xs={12} spacing={3}>\n          <Grid item xs={3}>\n            <TextField \n              margin=\"normal\"\n              id=\"outlined-basic\" \n              label=\"Title\" \n              variant=\"standard\" \n              value = { todo && todo.title ? todo.title : '' }\n              onChange={ (event) => onSetTodoProps('title', event.target.value) }\n              />\n          </Grid>\n          <Grid item xs={3}>\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n              <KeyboardDatePicker\n                margin=\"normal\"\n                id=\"date-picker-dialog\"\n                label=\"Date\"\n                format=\"yyyy-MM-dd\"\n                value={ todo && todo.date ? todo.date : null }\n                onChange={ (date) => onSetTodoProps('date', date.valueOf() )}\n                KeyboardButtonProps={{\n                  'aria-label': 'change date',\n                }}\n              />\n            </MuiPickersUtilsProvider>\n          </Grid>\n        </Grid>\n        <Grid item >\n         <Button variant='contained' color='primary' startIcon={<SaveIcon />}\n          onClick={onAddTodo}>Add</Button>&nbsp;&nbsp;\n         <Button variant='contained' color='default' startIcon={<UpdateIcon />}\n          onClick={onUpdateTodo}>Update</Button>&nbsp;&nbsp;\n         <Button variant='contained' color='secondary' startIcon={<DeleteIcon />}\n          onClick={onRemoveTodo}>Delete</Button>&nbsp;&nbsp;\n          \n        </Grid>\n      </form>\n    )\n  }\n}\n\nexport default TodoEditFormView;","\nfunction generateId(length) {\n    var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz'.split('');\n\n    if (! length) {\n        length = Math.floor(Math.random() * chars.length);\n    }\n\n    var str = '';\n    for (var i = 0; i < length; i++) {\n        str += chars[Math.floor(Math.random() * chars.length)];\n    }\n    return str;\n}\n\nexport default generateId;\n\nexport {\n    generateId,\n}","import React, { Component } from 'react';\nimport TodoEditFormView from '../views/TodoEditFormView';\n\nimport { inject, observer } from 'mobx-react';\nimport autobind from 'autobind-decorator';\nimport generateId from '../IDGenerator';\n\n@inject('todoStore')\n@autobind         // inject 아래에 선언해야 함 \n@observer\nclass TodoEditFormContainer extends Component {\n\n  onSetTodoProps(name, value) {\n    this.props.todoStore.setTodoProps(name, value);\n  }\n\n  onAddTodo() {\n    let { todo } = this.props.todoStore;\n    todo = { ...todo, id: generateId(5)}\n    this.props.todoStore.addTodo(todo);\n  }\n\n  onUpdateTodo() {\n    this.props.todoStore.updateTodo();\n  }\n\n  onRemoveTodo() {\n    this.props.todoStore.removeTodo();\n  }\n\n  render(){\n\n    const { todoStore } = this.props;    // props 에서 꺼내 씀 \n\n    return(\n      <TodoEditFormView \n        todo = { todoStore.todo }\n        onSetTodoProps = { this.onSetTodoProps }   // this.onSetTodoProps.bind(this)  - @autobind 로 처리 \n        onAddTodo = {this.onAddTodo} \n        onUpdateTodo = { this.onUpdateTodo }\n        onRemoveTodo = { this.onRemoveTodo }\n      />\n    )\n  }\n}\n\nexport default TodoEditFormContainer;","import React, { PureComponent } from 'react';\n\nimport { Table, TableContainer, TableHead, TableBody, TableRow, TableCell, Paper } from '@material-ui/core';\n\nimport { observer } from 'mobx-react';\nimport moment from 'moment';\n\n@observer\nclass TodoListView extends PureComponent {\n  render(){\n\n    // const sample = [{id: 1, title:'title1', date:'date1'}, {id: 2, title:'title2', date:'date2'}]\n\n    const { todos, onSelectedTodo } = this.props;\n\n    return (\n      <TableContainer component={Paper} >\n        <Table m={3}>\n          <TableHead>\n            <TableRow>\n              <TableCell align='center'>Title</TableCell>\n              <TableCell align='center'>Date</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {/* {sample.map( (todo ) => ( */}\n            {\n              Array.isArray(todos) && todos.length ? \n              todos.map( ( todo ) => (\n                <TableRow key={todo.id} hover onClick={ ()=>onSelectedTodo(todo)} >\n                  <TableCell>{todo.title}</TableCell>\n                  <TableCell>{moment(todo.date).format('YYYY-MM-DD HH:mm')}</TableCell>\n                </TableRow>\n            ))\n            :\n          <TableRow>\n            <TableCell>Empty</TableCell>\n          </TableRow>\n            }\n            \n          </TableBody>\n        </Table>\n      </TableContainer>\n    )\n  }\n}\n\nexport default TodoListView;","import React, { Component } from 'react';\nimport TodoListView from '../views/TodoListView';\n\nimport { inject, observer } from 'mobx-react';\nimport autobind from 'autobind-decorator';\n\n@inject('todoStore')\n@autobind\n@observer\nclass TodoListContainer extends Component {\n\n  onSelectedTodo(todo) {\n    this.props.todoStore.selectedTodo(todo);\n  }\n\n  render(){\n\n    // const { todos } = this.props.todoStore;\n    let { todos, searchText } = this.props.todoStore;\n\n    todos = todos.filter( (todo) => todo.title.toLowerCase().indexOf(searchText.toLowerCase()) !== -1);\n\n    // console.log(todos)\n\n    return (\n      <TodoListView\n        todos = { todos }\n        onSelectedTodo = { this.onSelectedTodo }\n      />\n    )\n  }\n}\n\nexport default TodoListContainer;","import React, { Component } from 'react';\nimport { TextField, InputAdornment  } from '@material-ui/core';\nimport  SearchIcon  from '@material-ui/icons/Search';\nimport { inject, observer } from 'mobx-react';\nimport autobind from 'autobind-decorator';\n\n@inject('todoStore')\n@autobind\n@observer\nclass SearchbarContainer extends Component {\n\n  onChangeSearchText(searchText) {\n    this.props.todoStore.setSearchText(searchText);\n  }\n\n  render(){\n    return (\n      <TextField\n        InputProps={{\n          startAdornment: (\n            <InputAdornment position=\"start\">\n              <SearchIcon />\n            </InputAdornment>\n          ),\n        }}\n        onChange={(event) => this.onChangeSearchText(event.target.value)}\n      />\n    )}\n}\n\nexport default SearchbarContainer;","import React, { Component } from 'react';\nimport TodoEditFormContainer from './containers/TodoEditFormContainer';\nimport TodoListContainer from './containers/TodoListContainer';\n\nimport {Box, Container} from '@material-ui/core';\nimport SearchbarContainer from './containers/SearchbarContainer';\n\nclass App extends Component {\n  render(){\n    return (\n      <Container >\n        <Box m={3}><TodoEditFormContainer /></Box>\n        <Box m={3}>\n          <SearchbarContainer />\n          <TodoListContainer />\n        </Box>\n      </Container>\n  );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { observable, action, computed, makeObservable , toJS} from 'mobx';\n\nclass TodoStore {\n\n    constructor() {\n        makeObservable(this);   //mobx5 버전이후 mobx6에서는 반드시 정의해야, 데이터 변경시 반영됨. \n    }\n\n    @observable \n    _todo = {\n       // title : 'test', \n    }   // id, title, date \n\n    @observable\n    _todos = [];\n\n    get todo() {\n        return this._todo;\n    }\n\n    get todos() {\n        return this._todos ? this._todos.slice() : [];\n        // return toJS(this._todos);\n    }\n\n    get searchText() {\n        return this._searchText;\n    }\n\n    @action\n    setTodoProps(name, value) {\n        this._todo = {\n            ...this._todo,    // ... 전개 연산자로 전체 객체르르 그대로 넘겨줌 \n            [name] : value\n        }\n    }\n\n    @action\n    setSearchText(searchText) {\n        this._searchText = searchText;\n    }\n\n    @action \n    addTodo(todo) {\n        this._todos.push(todo);\n    }\n\n    @action\n    selectedTodo(todo) {\n        this._todo = todo;\n    }\n\n    @action\n    updateTodo() {\n        let foundTodo = this._todos.find( (todo) => todo.id === this._todo.id ) ;\n        foundTodo.title = this._todo.title;\n        foundTodo.date = this._todo.date;\n\n        this._todo = {};\n    }\n\n\n    @action\n    removeTodo() {\n        let index = this._todos.findIndex( todo => todo.id === this._todo.id );\n        if(index > -1) {   //found\n            this._todos.splice(index, 1);\n        }\n\n        this._todo = {};\n    }\n}\n\n\nexport default new TodoStore();","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { Provider } from 'mobx-react';\nimport todoStore from './store/TodoStore';\n\nReactDOM.render(\n  <Provider todoStore = { todoStore } >\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}