{"ast":null,"code":"import _initializerDefineProperty from \"/Users/youngminlee/gitrepository/frontend/react-todo-mobx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/youngminlee/gitrepository/frontend/react-todo-mobx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/youngminlee/gitrepository/frontend/react-todo-mobx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _temp;\n\nimport { observable, action, computed, makeObservable, toJS } from 'mobx';\nlet TodoStore = (_class = (_temp = class TodoStore {\n  constructor() {\n    _initializerDefineProperty(this, \"_todo\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"_todos\", _descriptor2, this);\n\n    makeObservable(this); //mobx5 버전이후 mobx6에서는 반드시 정의해야, 데이터 변경시 반영됨. \n  }\n\n  get todo() {\n    return this._todo;\n  }\n\n  get todos() {\n    return this._todos ? this._todos.slice() : []; // return toJS(this._todos);\n  }\n\n  get searchText() {\n    return this._searchText;\n  }\n\n  setTodoProps(name, value) {\n    this._todo = { ...this._todo,\n      // ... 전개 연산자로 전체 객체르르 그대로 넘겨줌 \n      [name]: value\n    };\n  }\n\n  setSearchText(searchText) {\n    this._searchText = searchText;\n  }\n\n  addTodo(todo) {\n    this._todos.push(todo);\n  }\n\n  selectedTodo(todo) {\n    this._todo = todo;\n  }\n\n  updateTodo() {\n    let foundTodo = this._todos.find(todo => todo.id === this._todo.id);\n\n    foundTodo.title = this._todo.title;\n    foundTodo.date = this._todo.date;\n    this._todo = {};\n  }\n\n  removeTodo() {\n    let index = this._todos.findIndex(todo => todo.id === this._todo.id);\n\n    if (index > -1) {\n      //found\n      this._todos.splice(index, 1);\n    }\n\n    this._todo = {};\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"_todo\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return {// title : 'test', \n    };\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"_todos\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"setTodoProps\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"setTodoProps\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"addTodo\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"addTodo\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"selectedTodo\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"selectedTodo\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"updateTodo\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"updateTodo\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"removeTodo\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"removeTodo\"), _class.prototype)), _class);\nexport default new TodoStore();","map":{"version":3,"sources":["/Users/youngminlee/gitrepository/frontend/react-todo-mobx/src/store/TodoStore.js"],"names":["observable","action","computed","makeObservable","toJS","TodoStore","constructor","todo","_todo","todos","_todos","slice","searchText","_searchText","setTodoProps","name","value","setSearchText","addTodo","push","selectedTodo","updateTodo","foundTodo","find","id","title","date","removeTodo","index","findIndex","splice"],"mappings":";;;;;;AAAA,SAASA,UAAT,EAAqBC,MAArB,EAA6BC,QAA7B,EAAuCC,cAAvC,EAAwDC,IAAxD,QAAmE,MAAnE;IAEMC,S,sBAAN,MAAMA,SAAN,CAAgB;AAEZC,EAAAA,WAAW,GAAG;AAAA;;AAAA;;AACVH,IAAAA,cAAc,CAAC,IAAD,CAAd,CADU,CACc;AAC3B;;AAUD,MAAII,IAAJ,GAAW;AACP,WAAO,KAAKC,KAAZ;AACH;;AAED,MAAIC,KAAJ,GAAY;AACR,WAAO,KAAKC,MAAL,GAAc,KAAKA,MAAL,CAAYC,KAAZ,EAAd,GAAoC,EAA3C,CADQ,CAER;AACH;;AAED,MAAIC,UAAJ,GAAiB;AACb,WAAO,KAAKC,WAAZ;AACH;;AAGDC,EAAAA,YADA,CACaC,IADb,EACmBC,KADnB,EAC0B;AACtB,SAAKR,KAAL,GAAa,EACT,GAAG,KAAKA,KADC;AACS;AAClB,OAACO,IAAD,GAASC;AAFA,KAAb;AAIH;;AAEDC,EAAAA,aAAa,CAACL,UAAD,EAAa;AACtB,SAAKC,WAAL,GAAmBD,UAAnB;AACH;;AAGDM,EAAAA,OADA,CACQX,IADR,EACc;AACV,SAAKG,MAAL,CAAYS,IAAZ,CAAiBZ,IAAjB;AACH;;AAGDa,EAAAA,YADA,CACab,IADb,EACmB;AACf,SAAKC,KAAL,GAAaD,IAAb;AACH;;AAGDc,EAAAA,UADA,GACa;AACT,QAAIC,SAAS,GAAG,KAAKZ,MAAL,CAAYa,IAAZ,CAAmBhB,IAAD,IAAUA,IAAI,CAACiB,EAAL,KAAY,KAAKhB,KAAL,CAAWgB,EAAnD,CAAhB;;AACAF,IAAAA,SAAS,CAACG,KAAV,GAAkB,KAAKjB,KAAL,CAAWiB,KAA7B;AACAH,IAAAA,SAAS,CAACI,IAAV,GAAiB,KAAKlB,KAAL,CAAWkB,IAA5B;AAEA,SAAKlB,KAAL,GAAa,EAAb;AACH;;AAIDmB,EAAAA,UADA,GACa;AACT,QAAIC,KAAK,GAAG,KAAKlB,MAAL,CAAYmB,SAAZ,CAAuBtB,IAAI,IAAIA,IAAI,CAACiB,EAAL,KAAY,KAAKhB,KAAL,CAAWgB,EAAtD,CAAZ;;AACA,QAAGI,KAAK,GAAG,CAAC,CAAZ,EAAe;AAAI;AACf,WAAKlB,MAAL,CAAYoB,MAAZ,CAAmBF,KAAnB,EAA0B,CAA1B;AACH;;AAED,SAAKpB,KAAL,GAAa,EAAb;AACH;;AAnEW,C,+EAMXR,U;;;;;WACO,CACL;AADK,K;;0EAIPA,U;;;;;WACQ,E;;iEAeRC,M,iJAYAA,M,iJAKAA,M,oJAKAA,M,kJAUAA,M;AAYL,eAAe,IAAII,SAAJ,EAAf","sourcesContent":["import { observable, action, computed, makeObservable , toJS} from 'mobx';\n\nclass TodoStore {\n\n    constructor() {\n        makeObservable(this);   //mobx5 버전이후 mobx6에서는 반드시 정의해야, 데이터 변경시 반영됨. \n    }\n\n    @observable \n    _todo = {\n       // title : 'test', \n    }   // id, title, date \n\n    @observable\n    _todos = [];\n\n    get todo() {\n        return this._todo;\n    }\n\n    get todos() {\n        return this._todos ? this._todos.slice() : [];\n        // return toJS(this._todos);\n    }\n\n    get searchText() {\n        return this._searchText;\n    }\n\n    @action\n    setTodoProps(name, value) {\n        this._todo = {\n            ...this._todo,    // ... 전개 연산자로 전체 객체르르 그대로 넘겨줌 \n            [name] : value\n        }\n    }\n\n    setSearchText(searchText) {\n        this._searchText = searchText;\n    }\n    \n    @action \n    addTodo(todo) {\n        this._todos.push(todo);\n    }\n\n    @action\n    selectedTodo(todo) {\n        this._todo = todo;\n    }\n\n    @action\n    updateTodo() {\n        let foundTodo = this._todos.find( (todo) => todo.id === this._todo.id ) ;\n        foundTodo.title = this._todo.title;\n        foundTodo.date = this._todo.date;\n\n        this._todo = {};\n    }\n\n\n    @action\n    removeTodo() {\n        let index = this._todos.findIndex( todo => todo.id === this._todo.id );\n        if(index > -1) {   //found\n            this._todos.splice(index, 1);\n        }\n\n        this._todo = {};\n    }\n}\n\n\nexport default new TodoStore();"]},"metadata":{},"sourceType":"module"}